version: "3.8"

services:
  db:
    build:
      context: .
      dockerfile: Dockerfile.db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    networks:
      - greenlight-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  migrate:
    build:
      context: .
      dockerfile: Dockerfile.migrate
    environment:
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_DSN: ${DATABASE_DSN}
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - ./migrations:/migrations
    entrypoint:
      [
        "/wait-for-postgres.sh",
        "db",
        "migrate",
        "-path",
        "/migrations",
        "-database",
        "${DATABASE_DSN}",
        "up",
      ]
    depends_on:
      db:
        condition: service_healthy
    networks:
      - greenlight-network

  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    environment:
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_DSN: ${DATABASE_DSN}
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
    ports:
      - "8080:8080"
    depends_on:
      - db
      - migrate
    networks:
      - greenlight-network

volumes:
  db_data:

networks:
  greenlight-network:
