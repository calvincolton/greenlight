version: "3.8"

services:
  db:
    container_name: test_db
    build:
      context: .
      dockerfile: Dockerfile.db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      DATABASE_NAME: ${TEST_DATABASE_NAME}
      DATABASE_USER: ${TEST_DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_DSN: postgres://${TEST_DATABASE_USER}:${DATABASE_PASSWORD}@db:5432/${TEST_DATABASE_NAME}?sslmode=disable
    ports:
      - "5433:5432"
    volumes:
      - test_db_data:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    networks:
      - test_network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -d ${TEST_DATABASE_NAME} -U ${TEST_DATABASE_USER}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  migrate:
    container_name: test_migrate
    build:
      context: .
      dockerfile: Dockerfile.migrate
    environment:
      DATABASE_NAME: ${TEST_DATABASE_NAME}
      DATABASE_USER: ${TEST_DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_DSN: postgres://${TEST_DATABASE_USER}:${DATABASE_PASSWORD}@db:5432/${TEST_DATABASE_NAME}?sslmode=disable
    volumes:
      - ./migrations:/migrations
    entrypoint:
      [
        "/wait-for-postgres.sh",
        "db",
        "migrate",
        "-path",
        "/migrations",
        "-database",
        "postgres://${TEST_DATABASE_USER}:${DATABASE_PASSWORD}@db:5432/${TEST_DATABASE_NAME}?sslmode=disable",
        "up",
      ]
    depends_on:
      db:
        condition: service_healthy
    networks:
      - test_network

  api:
    container_name: test_api
    build:
      context: .
      dockerfile: Dockerfile.api
    environment:
      DATABASE_NAME: ${TEST_DATABASE_NAME}
      DATABASE_USER: ${TEST_DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_DSN: postgres://${TEST_DATABASE_USER}:${DATABASE_PASSWORD}@db:5432/${TEST_DATABASE_NAME}?sslmode=disable
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
    ports:
      - "8081:8080"
    depends_on:
      db:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    networks:
      - test_network
    healthcheck:
      test:
        ["CMD-SHELL", "curl -f http://localhost:8081/v1/healthcheck || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

volumes:
  test_db_data:

networks:
  test_network:
